@@ -260,7 +260,8 @@ void AddPendingReplyEvent3(void* pevthandler, CDataStream& vRecv)
CDataStream GetStreamFromEvent(const wxCommandEvent& event)
{
    wxString strData = event.GetString();
    return CDataStream(strData.begin(), strData.begin() + event.GetInt(), SER_NETWORK);
    const char* pszBegin = strData.c_str();
    return CDataStream(pszBegin, pszBegin + event.GetInt(), SER_NETWORK);
}


@@ -288,20 +289,6 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)
    SetIcon(wxICON(bitcoin));
    ptaskbaricon = new CMyTaskBarIcon();

    // Init toolbar with transparency masked bitmaps
    m_toolBar->ClearTools();

    //// shouldn't have to do mask separately anymore, bitmap alpha support added in wx 2.8.9,
    wxBitmap bmpSend(wxT("send20"), wxBITMAP_TYPE_RESOURCE);
    bmpSend.SetMask(new wxMask(wxBitmap(wxT("send20mask"), wxBITMAP_TYPE_RESOURCE)));
    m_toolBar->AddTool(wxID_BUTTONSEND, wxT("&Send Coins"), bmpSend, wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);

    wxBitmap bmpAddressBook(wxT("addressbook20"), wxBITMAP_TYPE_RESOURCE);
    bmpAddressBook.SetMask(new wxMask(wxBitmap(wxT("addressbook20mask"), wxBITMAP_TYPE_RESOURCE)));
    m_toolBar->AddTool(wxID_BUTTONRECEIVE, wxT("&Address Book"), bmpAddressBook, wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);

    m_toolBar->Realize();

    // Init column headers
    int nDateWidth = DateTimeStr(1229413914).size() * 6 + 8;
    if (!strstr(DateTimeStr(1229413914).c_str(), "2008"))
@@ -909,15 +896,17 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)
        {
            TRY_CRITICAL_BLOCK(cs_mapWallet)
            {
                bool fInserted = false;
                string strTop;
                if (m_listCtrl->GetItemCount())
                    strTop = (string)m_listCtrl->GetItemText(0);
                foreach(uint256 hash, vWalletUpdated)
                {
                    map<uint256, CWalletTx>::iterator mi = mapWallet.find(hash);
                    if (mi != mapWallet.end())
                        fInserted |= InsertTransaction((*mi).second, false);
                        InsertTransaction((*mi).second, false);
                }
                vWalletUpdated.clear();
                if (fInserted)
                if (m_listCtrl->GetItemCount() && strTop != (string)m_listCtrl->GetItemText(0))
                    m_listCtrl->ScrollList(0, INT_MAX);
            }
        }
@@ -954,7 +943,9 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)
    string strStatus = strprintf("     %d connections     %d blocks     %d transactions", vNodes.size(), nBestHeight + 1, nTransactionCount);
    m_statusBar->SetStatusText(strStatus, 2);

#ifdef __WXMSW__
    m_listCtrl->OnPaint(event);
#endif
}


@@ -1407,7 +1398,7 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)
    m_checkBoxLimitProcessors->SetValue(fLimitProcessors);
    m_spinCtrlLimitProcessors->Enable(fLimitProcessors);
    m_spinCtrlLimitProcessors->SetValue(nLimitProcessors);
    int nProcessors = atoi(getenv("NUMBER_OF_PROCESSORS"));
    int nProcessors = wxThread::GetCPUCount();
    if (nProcessors < 1)
        nProcessors = 999;
    m_spinCtrlLimitProcessors->SetRange(1, nProcessors);
@@ -1549,17 +1540,11 @@ void COptionsDialog::OnButtonApply(wxCommandEvent& event)
        walletdb.WriteSetting("fMinimizeOnClose", fMinimizeOnClose);
    }

    if (fUseProxy != m_checkBoxUseProxy->GetValue())
    {
        fUseProxy = m_checkBoxUseProxy->GetValue();
        walletdb.WriteSetting("fUseProxy", fUseProxy);
    }
    fUseProxy = m_checkBoxUseProxy->GetValue();
    walletdb.WriteSetting("fUseProxy", fUseProxy);

    if (addrProxy != GetProxyAddr())
    {
        addrProxy = GetProxyAddr();
        walletdb.WriteSetting("addrProxy", addrProxy);
    }
    addrProxy = GetProxyAddr();
    walletdb.WriteSetting("addrProxy", addrProxy);
}


@@ -1608,10 +1593,8 @@ CSendDialog::CSendDialog(wxWindow* parent, const wxString& strAddress) : CSendDi
    //// todo: should add a display of your balance for convenience

    // Set Icon
    wxBitmap bmpSend(wxT("send16"), wxBITMAP_TYPE_RESOURCE);
    bmpSend.SetMask(new wxMask(wxBitmap(wxT("send16masknoshadow"), wxBITMAP_TYPE_RESOURCE)));
    wxIcon iconSend;
    iconSend.CopyFromBitmap(bmpSend);
    iconSend.CopyFromBitmap(wxBitmap(send16noshadow_xpm));
    SetIcon(iconSend);

    wxCommandEvent event;
@@ -2231,10 +2214,8 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit
    m_listCtrl->SetFocus();

    // Set Icon
    wxBitmap bmpAddressBook(wxT("addressbook16"), wxBITMAP_TYPE_RESOURCE);
    bmpAddressBook.SetMask(new wxMask(wxBitmap(wxT("addressbook16mask"), wxBITMAP_TYPE_RESOURCE)));
    wxIcon iconAddressBook;
    iconAddressBook.CopyFromBitmap(bmpAddressBook);
    iconAddressBook.CopyFromBitmap(wxBitmap(addressbook16_xpm));
    SetIcon(iconAddressBook);

    // Fill listctrl with address book data
@@ -3345,7 +3326,7 @@ bool CMyApp::OnInit2()
    _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);
    _CrtSetReportFile(_CRT_WARN, CreateFile("NUL", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0));
#endif
#ifdef __WXDEBUG__
#if defined(__WXMSW__) && defined(__WXDEBUG__)
    // Disable malfunctioning wxWidgets debug assertion
    g_isPainting = 10000;
#endif
@@ -3362,8 +3343,7 @@ bool CMyApp::OnInit2()
            "  -gen=0\t\t  Don't generate coins\n"
            "  -min\t\t  Start minimized\n"
            "  -datadir=<dir>\t  Specify data directory\n"
            "  -proxy=<ip:port>\t  Connect through socks4 proxy,\n"
            "  \t\t     e.g. -proxy=127.0.0.1:9050 to use TOR\n"
            "  -proxy=<ip:port>\t  Connect through socks4 proxy\n"
            "  -addnode=<ip>\t  Add a node to connect to\n"
            "  -connect=<ip>\t  Connect only to the specified node\n"
            "  -?\t\t  This help message\n";
@@ -3386,6 +3366,8 @@ bool CMyApp::OnInit2()
        unsigned int nStart = GetTime();
        loop
        {
            // TODO: find out how to do this in Linux, or replace with wxWidgets commands
#ifdef __WXMSW__
            // Show the previous instance and exit
            HWND hwndPrev = FindWindow("wxWindowClassNR", "Bitcoin");
            if (hwndPrev)
@@ -3395,6 +3377,7 @@ bool CMyApp::OnInit2()
                SetForegroundWindow(hwndPrev);
                return false;
            }
#endif

            if (GetTime() > nStart + 60)
                return false;
@@ -3421,7 +3404,7 @@ bool CMyApp::OnInit2()
        fPrintToDebugger = true;

    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printf("Bitcoin version %d, Windows version %08x\n", VERSION, GetVersion());
    printf("Bitcoin version %d, OS version %s\n", VERSION, wxGetOsDescription().mb_str());

    if (mapArgs.count("-dropmessages"))
    {
@@ -3493,12 +3476,36 @@ bool CMyApp::OnInit2()
        return false;
    }

    if (mapArgs.count("-printblock"))
    {
        string strMatch = mapArgs["-printblock"];
        int nFound = 0;
        for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)
        {
            uint256 hash = (*mi).first;
            if (strncmp(hash.ToString().c_str(), strMatch.c_str(), strMatch.size()) == 0)
            {
                CBlockIndex* pindex = (*mi).second;
                CBlock block;
                block.ReadFromDisk(pindex, true);
                block.BuildMerkleTree();
                block.print();
                printf("\n");
                nFound++;
            }
        }
        if (nFound == 0)
            printf("No blocks matching %s were found\n", strMatch.c_str());
        OnExit();
        return false;
    }

    if (mapArgs.count("-gen"))
    {
        if (mapArgs["-gen"].empty())
            fGenerateBitcoins = true;
        else
            fGenerateBitcoins = atoi(mapArgs["-gen"].c_str());
            fGenerateBitcoins = (atoi(mapArgs["-gen"].c_str()) != 0);
    }

    if (mapArgs.count("-proxy"))
@@ -3511,9 +3518,6 @@ bool CMyApp::OnInit2()
            OnExit();
            return false;
        }
        CWalletDB walletdb;
        walletdb.WriteSetting("fUseProxy", fUseProxy);
        walletdb.WriteSetting("addrProxy", addrProxy);
    }

    if (mapArgs.count("-addnode"))
@@ -3522,6 +3526,7 @@ bool CMyApp::OnInit2()
        foreach(string strAddr, mapMultiArgs["-addnode"])
        {
            CAddress addr(strAddr, NODE_NETWORK);
            addr.nTime = 0; // so it won't relay unless successfully connected
            if (addr.IsValid())
                AddAddress(addrdb, addr);
        }
@@ -3559,7 +3564,11 @@ bool CMyApp::OnInit2()
    //
    // Tests
    //
#ifdef __WXMSW__
    if (argc >= 2 && stricmp(argv[1], "-send") == 0)
#else
    if (argc >= 2 && strcmp(argv[1], "-send") == 0)
#endif
    {
        int64 nValue = 1;
        if (argc >= 3)
@@ -3646,7 +3655,8 @@ void CMyApp::OnFatalException()



typedef WINSHELLAPI BOOL WINAPI (*PSHGETSPECIALFOLDERPATHA)(HWND hwndOwner, LPSTR lpszPath, int nFolder, BOOL fCreate);
#ifdef __WXMSW__
typedef WINSHELLAPI BOOL (WINAPI *PSHGETSPECIALFOLDERPATHA)(HWND hwndOwner, LPSTR lpszPath, int nFolder, BOOL fCreate);

string MyGetSpecialFolderPath(int nFolder, bool fCreate)
{
@@ -3737,7 +3747,10 @@ void SetStartOnSystemStartup(bool fAutoStart)
        CoUninitialize();
    }
}

#else
bool GetStartOnSystemStartup() { return false; }
void SetStartOnSystemStartup(bool fAutoStart) { }
#endif

@@ -7,6 +7,10 @@

#include "uibase.h"

#include "xpm/addressbook20.xpm"
#include "xpm/check.xpm"
#include "xpm/send20.xpm"

///////////////////////////////////////////////////////////////////////////

CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
@@ -60,8 +64,8 @@ CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString&
	m_toolBar->SetToolSeparation( 1 );
	m_toolBar->SetFont( wxFont( wxNORMAL_FONT->GetPointSize(), 70, 90, 90, false, wxEmptyString ) );
	
	m_toolBar->AddTool( wxID_BUTTONSEND, wxT("&Send Coins"), wxBitmap( wxT("send20"), wxBITMAP_TYPE_RESOURCE ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString );
	m_toolBar->AddTool( wxID_BUTTONRECEIVE, wxT("&Address Book"), wxBitmap( wxT("addressbook20"), wxBITMAP_TYPE_RESOURCE ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString );
	m_toolBar->AddTool( wxID_BUTTONSEND, wxT("&Send Coins"), wxBitmap( send20_xpm ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString );
	m_toolBar->AddTool( wxID_BUTTONRECEIVE, wxT("&Address Book"), wxBitmap( addressbook20_xpm ), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString );
	m_toolBar->Realize();
	
	m_statusBar = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );
@@ -666,7 +670,7 @@ CSendDialogBase::CSendDialogBase( wxWindow* parent, wxWindowID id, const wxStrin
	
	bSizer47->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_bitmapCheckMark = new wxStaticBitmap( this, wxID_ANY, wxICON( check ), wxDefaultPosition, wxSize( 16,16 ), 0 );
	m_bitmapCheckMark = new wxStaticBitmap( this, wxID_ANY, wxBitmap( check_xpm ), wxDefaultPosition, wxSize( 16,16 ), 0 );
	bSizer47->Add( m_bitmapCheckMark, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );
	
	m_staticText36 = new wxStaticText( this, wxID_ANY, wxT("Pay &To:"), wxDefaultPosition, wxSize( -1,-1 ), wxALIGN_RIGHT );
  
@@ -225,7 +225,7 @@
                    </object>
                </object>
            </object>
            <object class="wxToolBar" expanded="0">
            <object class="wxToolBar" expanded="1">
                <property name="bg"></property>
                <property name="bitmapsize">20,20</property>
                <property name="context_help"></property>
@@ -273,7 +273,7 @@
                <event name="OnSize"></event>
                <event name="OnUpdateUI"></event>
                <object class="tool" expanded="1">
                    <property name="bitmap">send20; Load From Resource</property>
                    <property name="bitmap">xpm/send20.xpm; Load From File</property>
                    <property name="id">wxID_BUTTONSEND</property>
                    <property name="kind">wxITEM_NORMAL</property>
                    <property name="label">&amp;Send Coins</property>
@@ -287,7 +287,7 @@
                    <event name="OnUpdateUI"></event>
                </object>
                <object class="tool" expanded="1">
                    <property name="bitmap">addressbook20; Load From Resource</property>
                    <property name="bitmap">xpm/addressbook20.xpm; Load From File</property>
                    <property name="id">wxID_BUTTONRECEIVE</property>
                    <property name="kind">wxITEM_NORMAL</property>
                    <property name="label">&amp;Address Book</property>
@@ -1685,7 +1685,7 @@
                </object>
            </object>
        </object>
        <object class="Dialog" expanded="1">
        <object class="Dialog" expanded="0">
            <property name="bg"></property>
            <property name="center"></property>
            <property name="context_help"></property>
@@ -3699,7 +3699,7 @@
                                    <property name="proportion">0</property>
                                    <object class="wxStaticBitmap" expanded="1">
                                        <property name="bg"></property>
                                        <property name="bitmap">check; Load From Icon Resource [-1; -1]</property>
                                        <property name="bitmap">xpm/check.xpm; Load From File</property>
                                        <property name="context_help"></property>
                                        <property name="enabled">1</property>
                                        <property name="fg"></property>
                                        
    @@ -38,8 +38,10 @@ public:
            ppmutexOpenSSL[i] = new wxMutex();
        CRYPTO_set_locking_callback(locking_callback);

#ifdef __WXMSW__
        // Seed random number generator with screen scrape and other hardware sources
        RAND_screen();
#endif

        // Seed random number generator with performance counter
        RandAddSeed();
@@ -325,8 +327,8 @@ void ParseParameters(int argc, char* argv[])
            pszValue = strchr(psz, '=');
            *pszValue++ = '\0';
        }
        strlwr(psz);
        #ifdef __WXMSW__
        _strlwr(psz);
        if (psz[0] == '/')
            psz[0] = '-';
        #endif
@@ -343,9 +345,13 @@ void ParseParameters(int argc, char* argv[])

void FormatException(char* pszMessage, std::exception* pex, const char* pszThread)
{
#ifdef __WXMSW__
    char pszModule[MAX_PATH];
    pszModule[0] = '\0';
    GetModuleFileName(NULL, pszModule, sizeof(pszModule));
#else
    const char* pszModule = wxStandardPaths::Get().GetExecutablePath().mb_str();
#endif
    if (pex)
        snprintf(pszMessage, 1000,
            "EXCEPTION: %s       \n%s       \n%s in %s       \n", typeid(*pex).name(), pex->what(), pszModule, pszThread);
            
     @@ -55,9 +55,34 @@ inline T& REF(const T& val)
}

#ifndef __WXMSW__
#define closesocket(s)  close(s)
#define INVALID_SOCKET  (SOCKET)(~0)
#define _UI64_MAX           UINT64_MAX
#define _I64_MAX            INT64_MAX
#define WSAGetLastError()   errno
#define WSAEWOULDBLOCK      EWOULDBLOCK
#define WSAEMSGSIZE         EMSGSIZE
#define WSAEINTR            EINTR
#define WSAEINPROGRESS      EINPROGRESS
#define WSAEADDRINUSE       EADDRINUSE
#define closesocket(s)      close(s)
#define INVALID_SOCKET      (SOCKET)(~0)
#define SOCKET_ERROR        -1
typedef u_int SOCKET;
#define _vsnprintf(a,b,c,d) vsnprintf(a,b,c,d)
#define strlwr(psz)         to_lower(psz)
#define _strlwr(psz)        to_lower(psz)
#define _mkdir(psz)         filesystem::create_directory(psz)
#define MAX_PATH            1024
#define Sleep(n)            wxMilliSleep(n)
#define Beep(n1,n2)         (0)
inline int _beginthread(void(*pfn)(void*), unsigned nStack, void* parg) { thread(bind(pfn, parg)); return 0; }
inline void _endthread() { pthread_exit(NULL); }
inline int GetCurrentThread() { return 0; }
// threads are processes on linux, so setpriority affects just the one thread
inline void SetThreadPriority(int nThread, int nPriority) { setpriority(PRIO_PROCESS, getpid(), nPriority); }
#define THREAD_PRIORITY_LOWEST          PRIO_MIN
#define THREAD_PRIORITY_BELOW_NORMAL    2
#define THREAD_PRIORITY_NORMAL          0
#define THREAD_PRIORITY_ABOVE_NORMAL    0
#endif


@@ -120,7 +145,7 @@ public:
protected:
    wxMutex mutex;
public:
    explicit CCriticalSection() { }
    explicit CCriticalSection() : mutex(wxMUTEX_RECURSIVE) { }
    ~CCriticalSection() { }
    void Enter() { mutex.Lock(); }
    void Leave() { mutex.Unlock(); }
@@ -183,7 +208,7 @@ inline int OutputDebugStringF(const char* pszFormat, ...)
        // print to debug.log
        char pszFile[MAX_PATH+100];
        GetDataDir(pszFile);
        strlcat(pszFile, "\\debug.log", sizeof(pszFile));
        strlcat(pszFile, "/debug.log", sizeof(pszFile));
        FILE* fileout = fopen(pszFile, "a");
        if (fileout)
        {
@@ -354,13 +379,6 @@ inline int64 GetTimeMillis()
    return wxGetLocalTimeMillis().GetValue();
}

#ifndef __WXMSW__
inline void Sleep(unsigned int nMilliseconds)
{
    wxMilliSleep(nMilliseconds);
}
#endif



       
