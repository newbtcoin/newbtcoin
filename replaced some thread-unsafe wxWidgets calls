@@ -48,6 +48,10 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet)
    SOCKET hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (hSocket == INVALID_SOCKET)
        return false;
#if defined(__BSD__) || defined(__WXOSX__)
    int set = 1;
    setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));
#endif

    bool fRoutable = !(addrConnect.GetByte(3) == 10 || (addrConnect.GetByte(3) == 192 && addrConnect.GetByte(2) == 168));
    bool fProxy = (fUseProxy && fRoutable);
@@ -68,7 +72,7 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet)
        char* pszSocks4 = pszSocks4IP;
        int nSize = sizeof(pszSocks4IP);

        int ret = send(hSocket, pszSocks4, nSize, 0);
        int ret = send(hSocket, pszSocks4, nSize, MSG_NOSIGNAL);
        if (ret != nSize)
        {
            closesocket(hSocket);
@@ -100,7 +104,7 @@ bool GetMyExternalIP2(const CAddress& addrConnect, const char* pszGet, const cha
    if (!ConnectSocket(addrConnect, hSocket))
        return error("GetMyExternalIP() : connection to %s failed", addrConnect.ToString().c_str());

    send(hSocket, pszGet, strlen(pszGet), 0);
    send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);

    string strLine;
    while (RecvLine(hSocket, strLine))
@@ -124,7 +128,8 @@ bool GetMyExternalIP2(const CAddress& addrConnect, const char* pszGet, const cha
            if (strLine.find("<"))
                strLine = strLine.substr(0, strLine.find("<"));
            strLine = strLine.substr(strspn(strLine.c_str(), " \t\n\r"));
            strLine = wxString(strLine).Trim();
            while (strLine.size() > 0 && isspace(strLine[strLine.size()-1]))
                strLine.resize(strLine.size()-1);
            CAddress addr(strLine.c_str());
            printf("GetMyExternalIP() received [%s] %s\n", strLine.c_str(), addr.ToString().c_str());
            if (addr.ip == 0 || addr.ip == INADDR_NONE || !addr.IsRoutable())
@@ -492,24 +497,26 @@ void ThreadSocketHandler(void* parg)
{
    IMPLEMENT_RANDOMIZE_STACK(ThreadSocketHandler(parg));

    loop
    try
    {
        vnThreadsRunning[0]++;
        CheckForShutdown(0);
        try
        {
            ThreadSocketHandler2(parg);
            vnThreadsRunning[0]--;
        }
        catch (std::exception& e) {
            vnThreadsRunning[0]--;
            PrintException(&e, "ThreadSocketHandler()");
        } catch (...) {
            vnThreadsRunning[0]--;
            PrintException(NULL, "ThreadSocketHandler()");
        }
        Sleep(5000);
        ThreadSocketHandler2(parg);
        vnThreadsRunning[0]--;
    }
    catch (std::exception& e) {
        vnThreadsRunning[0]--;
        PrintException(&e, "ThreadSocketHandler()");
    } catch (...) {
        vnThreadsRunning[0]--;
        PrintException(NULL, "ThreadSocketHandler()");
    }

    foreach(CNode* pnode, vNodes)
        closesocket(pnode->hSocket);
    if (closesocket(hListenSocket) == SOCKET_ERROR)
        printf("closesocket(hListenSocket) failed with error %d\n", WSAGetLastError());

    printf("ThreadSocketHandler exiting\n");
}

void ThreadSocketHandler2(void* parg)
@@ -600,7 +607,8 @@ void ThreadSocketHandler2(void* parg)
        vnThreadsRunning[0]--;
        int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, NULL, &timeout);
        vnThreadsRunning[0]++;
        CheckForShutdown(0);
        if (fShutdown)
            return;
        if (nSelect == SOCKET_ERROR)
        {
            int nErr = WSAGetLastError();
@@ -659,7 +667,8 @@ void ThreadSocketHandler2(void* parg)
            vNodesCopy = vNodes;
        foreach(CNode* pnode, vNodesCopy)
        {
            CheckForShutdown(0);
            if (fShutdown)
                return;
            SOCKET hSocket = pnode->hSocket;

            //
@@ -708,7 +717,7 @@ void ThreadSocketHandler2(void* parg)
                    CDataStream& vSend = pnode->vSend;
                    if (!vSend.empty())
                    {
                        int nBytes = send(hSocket, &vSend[0], vSend.size(), 0);
                        int nBytes = send(hSocket, &vSend[0], vSend.size(), MSG_NOSIGNAL);
                        if (nBytes > 0)
                        {
                            vSend.erase(vSend.begin(), vSend.begin() + nBytes);
@@ -747,24 +756,21 @@ void ThreadOpenConnections(void* parg)
{
    IMPLEMENT_RANDOMIZE_STACK(ThreadOpenConnections(parg));

    loop
    try
    {
        vnThreadsRunning[1]++;
        CheckForShutdown(1);
        try
        {
            ThreadOpenConnections2(parg);
            vnThreadsRunning[1]--;
        }
        catch (std::exception& e) {
            vnThreadsRunning[1]--;
            PrintException(&e, "ThreadOpenConnections()");
        } catch (...) {
            vnThreadsRunning[1]--;
            PrintException(NULL, "ThreadOpenConnections()");
        }
        Sleep(5000);
        ThreadOpenConnections2(parg);
        vnThreadsRunning[1]--;
    }
    catch (std::exception& e) {
        vnThreadsRunning[1]--;
        PrintException(&e, "ThreadOpenConnections()");
    } catch (...) {
        vnThreadsRunning[1]--;
        PrintException(NULL, "ThreadOpenConnections()");
    }

    printf("ThreadOpenConnections exiting\n");
}

void ThreadOpenConnections2(void* parg)
@@ -778,7 +784,8 @@ void ThreadOpenConnections2(void* parg)
        for (int i = 0; i < 10; i++)
        {
            Sleep(1000);
            CheckForShutdown(1);
            if (fShutdown)
                return;
        }
    }

@@ -792,7 +799,8 @@ void ThreadOpenConnections2(void* parg)
            {
                OpenNetworkConnection(addr);
                Sleep(1000);
                CheckForShutdown(1);
                if (fShutdown)
                    return;
            }
        }
    }
@@ -806,11 +814,13 @@ void ThreadOpenConnections2(void* parg)
        const int nMaxConnections = 15;
        while (vNodes.size() >= nMaxConnections || vNodes.size() >= mapAddresses.size())
        {
            CheckForShutdown(1);
            if (fShutdown)
                return;
            Sleep(2000);
        }
        vnThreadsRunning[1]++;
        CheckForShutdown(1);
        if (fShutdown)
            return;

        //
        // Choose an address to connect to based on most recently seen
@@ -869,14 +879,16 @@ bool OpenNetworkConnection(const CAddress& addrConnect)
    //
    // Initiate outbound network connection
    //
    CheckForShutdown(1);
    if (fShutdown)
        return false;
    if (addrConnect.ip == addrLocalHost.ip || !addrConnect.IsIPv4() || FindNode(addrConnect.ip))
        return false;

    vnThreadsRunning[1]--;
    CNode* pnode = ConnectNode(addrConnect);
    vnThreadsRunning[1]++;
    CheckForShutdown(1);
    if (fShutdown)
        return false;
    if (!pnode)
        return false;
    pnode->fNetworkNode = true;
@@ -914,24 +926,21 @@ void ThreadMessageHandler(void* parg)
{
    IMPLEMENT_RANDOMIZE_STACK(ThreadMessageHandler(parg));

    loop
    try
    {
        vnThreadsRunning[2]++;
        CheckForShutdown(2);
        try
        {
            ThreadMessageHandler2(parg);
            vnThreadsRunning[2]--;
        }
        catch (std::exception& e) {
            vnThreadsRunning[2]--;
            PrintException(&e, "ThreadMessageHandler()");
        } catch (...) {
            vnThreadsRunning[2]--;
            PrintException(NULL, "ThreadMessageHandler()");
        }
        Sleep(5000);
        ThreadMessageHandler2(parg);
        vnThreadsRunning[2]--;
    }
    catch (std::exception& e) {
        vnThreadsRunning[2]--;
        PrintException(&e, "ThreadMessageHandler()");
    } catch (...) {
        vnThreadsRunning[2]--;
        PrintException(NULL, "ThreadMessageHandler()");
    }

    printf("ThreadMessageHandler exiting\n");
}

void ThreadMessageHandler2(void* parg)
@@ -951,10 +960,14 @@ void ThreadMessageHandler2(void* parg)
            // Receive messages
            TRY_CRITICAL_BLOCK(pnode->cs_vRecv)
                ProcessMessages(pnode);
            if (fShutdown)
                return;

            // Send messages
            TRY_CRITICAL_BLOCK(pnode->cs_vSend)
                SendMessages(pnode);
            if (fShutdown)
                return;

            pnode->Release();
        }
@@ -963,7 +976,8 @@ void ThreadMessageHandler2(void* parg)
        vnThreadsRunning[2]--;
        Sleep(100);
        vnThreadsRunning[2]++;
        CheckForShutdown(2);
        if (fShutdown)
            return;
    }
}

@@ -996,7 +1010,7 @@ bool StartNode(string& strError)

    // Get local host ip
    char pszHostName[255];
    if (gethostname(pszHostName, 255) == SOCKET_ERROR)
    if (gethostname(pszHostName, sizeof(pszHostName)) == SOCKET_ERROR)
    {
        strError = strprintf("Error: Unable to get IP address of this computer (gethostname returned error %d)", WSAGetLastError());
        printf("%s\n", strError.c_str());
@@ -1009,9 +1023,16 @@ bool StartNode(string& strError)
        printf("%s\n", strError.c_str());
        return false;
    }
    addrLocalHost = CAddress(*(long*)(phostent->h_addr_list[0]),
                             DEFAULT_PORT,
                             nLocalServices);

    // Take the first IP that isn't loopback 127.x.x.x
    for (int i = 0; phostent->h_addr_list[i] != NULL; i++)
        printf("host ip %d: %s\n", i, CAddress(*(unsigned int*)phostent->h_addr_list[i]).ToStringIP().c_str());
    for (int i = 0; phostent->h_addr_list[i] != NULL; i++)
    {
        addrLocalHost = CAddress(*(unsigned int*)phostent->h_addr_list[i], DEFAULT_PORT, nLocalServices);
        if (addrLocalHost.IsValid() && addrLocalHost.GetByte(3) != 127)
            break;
    }
    printf("addrLocalHost = %s\n", addrLocalHost.ToString().c_str());

    // Create socket for listening for incoming connections
@@ -1022,6 +1043,10 @@ bool StartNode(string& strError)
        printf("%s\n", strError.c_str());
        return false;
    }
#if defined(__BSD__) || defined(__WXOSX__)
    int set = 1;
    setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));
#endif

    // Set to nonblocking, incoming connections will also inherit this
#ifdef __WXMSW__
@@ -1038,19 +1063,22 @@ bool StartNode(string& strError)

    // The sockaddr_in structure specifies the address family,
    // IP address, and port for the socket that is being bound
    int nRetryLimit = 15;
    struct sockaddr_in sockaddr = addrLocalHost.GetSockAddr();
    struct sockaddr_in sockaddr;
    memset(&sockaddr, 0, sizeof(sockaddr));
    sockaddr.sin_family = AF_INET;
    sockaddr.sin_addr.s_addr = INADDR_ANY; // bind to all IPs on this computer
    sockaddr.sin_port = DEFAULT_PORT;
    if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)
    {
        int nErr = WSAGetLastError();
        if (nErr == WSAEADDRINUSE)
            strError = strprintf("Error: Unable to bind to port %s on this computer. The program is probably already running.", addrLocalHost.ToString().c_str());
            strError = strprintf("Error: Unable to bind to port %d on this computer. The program is probably already running.", ntohs(sockaddr.sin_port));
        else
            strError = strprintf("Error: Unable to bind to port %s on this computer (bind returned error %d)", addrLocalHost.ToString().c_str(), nErr);
            strError = strprintf("Error: Unable to bind to port %d on this computer (bind returned error %d)", ntohs(sockaddr.sin_port), nErr);
        printf("%s\n", strError.c_str());
        return false;
    }
    printf("bound to addrLocalHost = %s\n", addrLocalHost.ToString().c_str());
    printf("bound to port %d\n", ntohs(sockaddr.sin_port));

    // Listen for incoming connections
    if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)
@@ -1065,6 +1093,7 @@ bool StartNode(string& strError)
    {
        // Proxies can't take incoming connections
        addrLocalHost.ip = CAddress("0.0.0.0").ip;
        printf("addrLocalHost = %s\n", addrLocalHost.ToString().c_str());
    }
    else
    {
@@ -1115,17 +1144,17 @@ bool StopNode()
    fShutdown = true;
    nTransactionsUpdated++;
    int64 nStart = GetTime();
    while (vnThreadsRunning[0] || vnThreadsRunning[2] || vnThreadsRunning[3])
    while (vnThreadsRunning[0] > 0 || vnThreadsRunning[2] > 0 || vnThreadsRunning[3] > 0)
    {
        if (GetTime() - nStart > 15)
            break;
        Sleep(20);
    }
    if (vnThreadsRunning[0]) printf("ThreadSocketHandler still running\n");
    if (vnThreadsRunning[1]) printf("ThreadOpenConnections still running\n");
    if (vnThreadsRunning[2]) printf("ThreadMessageHandler still running\n");
    if (vnThreadsRunning[3]) printf("ThreadBitcoinMiner still running\n");
    while (vnThreadsRunning[2])
    if (vnThreadsRunning[0] > 0) printf("ThreadSocketHandler still running\n");
    if (vnThreadsRunning[1] > 0) printf("ThreadOpenConnections still running\n");
    if (vnThreadsRunning[2] > 0) printf("ThreadMessageHandler still running\n");
    if (vnThreadsRunning[3] > 0) printf("ThreadBitcoinMiner still running\n");
    while (vnThreadsRunning[2] > 0)
        Sleep(20);
    Sleep(50);

@@ -1135,21 +1164,3 @@ bool StopNode()
#endif
    return true;
}

void CheckForShutdown(int n)
{
    if (fShutdown)
    {
        if (n != -1)
            if (--vnThreadsRunning[n] < 0)
                vnThreadsRunning[n] = 0;
        if (n == 0)
        {
            foreach(CNode* pnode, vNodes)
                closesocket(pnode->hSocket);
            closesocket(hListenSocket);
        }
        printf("Thread %d exiting\n", n);
        _endthread();
    }
}
@@ -30,7 +30,6 @@ void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1);
bool AnySubscribed(unsigned int nChannel);
bool StartNode(string& strError=REF(string()));
bool StopNode();
void CheckForShutdown(int n);



@@ -268,6 +267,7 @@ public:
    struct sockaddr_in GetSockAddr() const
    {
        struct sockaddr_in sockaddr;
        memset(&sockaddr, 0, sizeof(sockaddr));
        sockaddr.sin_family = AF_INET;
        sockaddr.sin_addr.s_addr = ip;
        sockaddr.sin_port = port;
   @@ -65,11 +65,13 @@ bool Is24HourTime()

string DateStr(int64 nTime)
{
    // Can only be used safely here in the UI
    return (string)wxDateTime((time_t)nTime).FormatDate();
}

string DateTimeStr(int64 nTime)
{
    // Can only be used safely here in the UI
    wxDateTime datetime((time_t)nTime);
    if (Is24HourTime())
        return (string)datetime.Format("%x %H:%M");
@@ -283,6 +285,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)
    fRefreshListCtrl = false;
    fRefreshListCtrlRunning = false;
    fOnSetFocusAddress = false;
    fRefresh = false;
    m_choiceFilter->SetSelection(0);
    m_staticTextBalance->SetLabel(FormatMoney(GetBalance()) + "  ");
    m_listCtrl->SetFocus();
@@ -350,7 +353,7 @@ void Shutdown(void* parg)
        StopNode();
        DBFlush(true);

        printf("Bitcoin exiting\n");
        printf("Bitcoin exiting\n\n");
        exit(0);
    }
}
@@ -391,6 +394,30 @@ void CMainFrame::OnListColBeginDrag(wxListEvent& event)
        event.Veto();
}

int CMainFrame::GetSortIndex(const string& strSort)
{
#ifdef __WXMSW__
    return 0;
#else
    // The wx generic listctrl implementation used on GTK doesn't sort,
    // so we have to do it ourselves.  Remember, we sort in reverse order.
    // In the wx generic implementation, they store the list of items
    // in a vector, so indexed lookups are fast, but inserts are slower
    // the closer they are to the top.
    int low = 0;
    int high = m_listCtrl->GetItemCount();
    while (low < high)
    {
        int mid = low + ((high - low) / 2);
        if (strSort.compare(m_listCtrl->GetItemText(mid).c_str()) >= 0)
            high = mid;
        else
            low = mid + 1;
    }
    return low;
#endif
}

void CMainFrame::InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSort, const wxString& str2, const wxString& str3, const wxString& str4, const wxString& str5, const wxString& str6)
{
    string str0 = strSort;
@@ -407,7 +434,7 @@ void CMainFrame::InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSo
    // fNew is for blind insert, only use if you're sure it's new
    if (fNew || nIndex == -1)
    {
        nIndex = m_listCtrl->InsertItem(0, str0);
        nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), str0);
    }
    else
    {
@@ -415,7 +442,7 @@ void CMainFrame::InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSo
        if (GetItemText(m_listCtrl, nIndex, 0) != str0)
        {
            m_listCtrl->DeleteItem(nIndex);
            nIndex = m_listCtrl->InsertItem(0, str0);
            nIndex = m_listCtrl->InsertItem(GetSortIndex(strSort), str0);
        }
    }

@@ -826,6 +853,11 @@ void CMainFrame::RefreshStatusColumn()

void CMainFrame::OnPaint(wxPaintEvent& event)
{
    if (fRefresh)
    {
        fRefresh = false;
        Refresh();
    }
    event.Skip();
}

@@ -846,7 +878,7 @@ void ThreadDelayedRepaint(void* parg)
            {
                printf("DelayedRepaint\n");
                wxPaintEvent event;
                pframeMain->Refresh();
                pframeMain->fRefresh = true;
                pframeMain->AddPendingEvent(event);
            }
        }
@@ -871,7 +903,7 @@ void MainFrameRepaint()

        printf("MainFrameRepaint\n");
        wxPaintEvent event;
        pframeMain->Refresh();
        pframeMain->fRefresh = true;
        pframeMain->AddPendingEvent(event);
    }
}
@@ -907,7 +939,7 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)
                }
                vWalletUpdated.clear();
                if (m_listCtrl->GetItemCount() && strTop != (string)m_listCtrl->GetItemText(0))
                    m_listCtrl->ScrollList(0, INT_MAX);
                    m_listCtrl->ScrollList(0, INT_MIN/2);
            }
        }

@@ -943,9 +975,10 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)
    string strStatus = strprintf("     %d connections     %d blocks     %d transactions", vNodes.size(), nBestHeight + 1, nTransactionCount);
    m_statusBar->SetStatusText(strStatus, 2);

#ifdef __WXMSW__
    m_listCtrl->OnPaint(event);
#endif
    // Pass through to listctrl to actually do the paint, we're just hooking the message
    m_listCtrl->Disconnect(wxEVT_PAINT, (wxObjectEventFunction)NULL, NULL, this);
    m_listCtrl->GetEventHandler()->ProcessEvent(event);
    m_listCtrl->Connect(wxEVT_PAINT, wxPaintEventHandler(CMainFrame::OnPaintListCtrl), NULL, this);
}


@@ -3331,7 +3364,11 @@ bool CMyApp::OnInit2()
    g_isPainting = 10000;
#endif
    wxImage::AddHandler(new wxPNGHandler);
#ifdef __WXMSW__
    SetAppName("Bitcoin");
#else
    SetAppName("bitcoin");
#endif

    ParseParameters(argc, argv);
    if (mapArgs.count("-?") || mapArgs.count("--help"))
@@ -3355,7 +3392,10 @@ bool CMyApp::OnInit2()
    // Limit to single instance per user
    // Required to protect the database files if we're going to keep deleting log.*
    //
    wxString strMutexName = wxString("Bitcoin.") + getenv("HOMEPATH");
#ifdef __WXMSW__
    // todo: wxSingleInstanceChecker wasn't working on Linux, never deleted its lock file
    //  maybe should go by whether successfully bind port 8333 instead
    wxString strMutexName = wxString("bitcoin_running.") + getenv("HOMEPATH");
    for (int i = 0; i < strMutexName.size(); i++)
        if (!isalnum(strMutexName[i]))
            strMutexName[i] = '.';
@@ -3367,7 +3407,6 @@ bool CMyApp::OnInit2()
        loop
        {
            // TODO: find out how to do this in Linux, or replace with wxWidgets commands
#ifdef __WXMSW__
            // Show the previous instance and exit
            HWND hwndPrev = FindWindow("wxWindowClassNR", "Bitcoin");
            if (hwndPrev)
@@ -3377,7 +3416,6 @@ bool CMyApp::OnInit2()
                SetForegroundWindow(hwndPrev);
                return false;
            }
#endif

            if (GetTime() > nStart + 60)
                return false;
@@ -3390,6 +3428,7 @@ bool CMyApp::OnInit2()
                break;
        }
    }
#endif

    //
    // Parameters
    @@ -32,7 +32,6 @@ extern int fMinimizeOnClose;


extern void HandleCtrlA(wxKeyEvent& event);
extern string DateTimeStr(int64 nTime);
extern string FormatTxStatus(const CWalletTx& wtx);
extern void CrossThreadCall(int nID, void* pdata);
extern void MainFrameRepaint();
@@ -84,8 +83,10 @@ public:
    bool fRefreshListCtrlRunning;
    bool fOnSetFocusAddress;
    unsigned int nListViewUpdated;
    bool fRefresh;

    void OnCrossThreadCall(wxCommandEvent& event);
    int GetSortIndex(const string& strSort);
    void InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSort, const wxString& str1, const wxString& str2, const wxString& str3, const wxString& str4, const wxString& str5);
    bool DeleteLine(uint256 hashKey);
    bool InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex=-1);
