@@ -10,7 +10,7 @@ cryptographic software written by Eric Young (eay@cryptsoft.com).

Compilers Supported
-------------------
MinGW GCC
MinGW GCC (v3.4.5)
Microsoft Visual C++ 6.0 SP6

@@ -61,18 +61,19 @@ CDB::CDB(const char* pszFile, const char* pszMode, bool fTxn) : pdb(NULL)
        {
            if (fShutdown)
                return;
            string strAppDir = GetAppDir();
            string strLogDir = strAppDir + "\\database";
            string strDataDir = GetDataDir();
            string strLogDir = strDataDir + "\\database";
            _mkdir(strLogDir.c_str());
            printf("dbenv.open strAppDir=%s\n", strAppDir.c_str());
            string strErrorFile = strDataDir + "\\db.log";
            printf("dbenv.open strLogDir=%s strErrorFile=%s\n", strLogDir.c_str(), strErrorFile.c_str());

            dbenv.set_lg_dir(strLogDir.c_str());
            dbenv.set_lg_max(10000000);
            dbenv.set_lk_max_locks(10000);
            dbenv.set_lk_max_objects(10000);
            dbenv.set_errfile(fopen("db.log", "a")); /// debug
            dbenv.set_errfile(fopen(strErrorFile.c_str(), "a")); /// debug
            ///dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1); /// causes corruption
            ret = dbenv.open(strAppDir.c_str(),
            ret = dbenv.open(strDataDir.c_str(),
                             DB_CREATE     |
                             DB_INIT_LOCK  |
                             DB_INIT_LOG   |
@@ -139,6 +140,8 @@ void DBFlush(bool fShutdown)
    // Flush log data to the actual data file
    //  on all files that are not in use
    printf("DBFlush(%s)\n", fShutdown ? "true" : "false");
    if (!fDbEnvInit)
        return;
    CRITICAL_BLOCK(cs_db)
    {
        dbenv.txn_checkpoint(0, 0, 0);
@@ -421,7 +424,7 @@ bool CAddrDB::LoadAddresses()
                while (fgets(psz, sizeof(psz), filein))
                {
                    CAddress addr(psz, NODE_NETWORK);
                    if (addr.ip != 0)
                    if (addr.IsValid())
                    {
                        AddAddress(*this, addr);
                        mapIRCAddresses.insert(make_pair(addr.GetKey(), addr));
@@ -676,10 +679,10 @@ void ThreadFlushWalletDB(void* parg)
                    {
                        // Flush wallet.dat so it's self contained
                        nLastFlushed == nWalletDBUpdated;
                        int64 nStart = PerformanceCounter();
                        int64 nStart = GetTimeMillis();
                        dbenv.txn_checkpoint(0, 0, 0);
                        dbenv.lsn_reset(strFile.c_str(), 0);
                        printf("Flushed wallet.dat %15"PRI64d"\n", PerformanceCounter() - nStart);
                        printf("Flushed wallet.dat %"PRI64d"ms\n", GetTimeMillis() - nStart);
                        mapFileUseCount.erase(mi++);
                    }
                }
        @@ -40,7 +40,7 @@ bool DecodeAddress(string str, CAddress& addr)
        return false;
    memcpy(&tmp, &vch[0], sizeof(tmp));

    addr  = CAddress(tmp.ip, tmp.port);
    addr = CAddress(tmp.ip, tmp.port, NODE_NETWORK);
    return true;
}

@@ -163,6 +163,7 @@ void ThreadIRCSeed(void* parg)
    int nErrorWait = 10;
    int nRetryWait = 10;

    // IRC server blocks TOR users
    if (fUseProxy && addrProxy.port == htons(9050))
        return;

@@ -237,14 +238,14 @@ void ThreadIRCSeed(void* parg)
            {
                // index 7 is limited to 16 characters
                // could get full length name at index 10, but would be different from join messages
                strcpy(pszName, vWords[7].c_str());
                strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));
                printf("IRC got who\n");
            }

            if (vWords[1] == "JOIN" && vWords[0].size() > 1)
            {
                // :username!username@50000007.F000000B.90000002.IP JOIN :#channelname
                strcpy(pszName, vWords[0].c_str() + 1);
                strlcpy(pszName, vWords[0].c_str() + 1, sizeof(pszName));
                if (strchr(pszName, '!'))
                    *strchr(pszName, '!') = '\0';
                printf("IRC got join\n");
    @@ -40,7 +40,7 @@ bool DecodeAddress(string str, CAddress& addr)
        return false;
    memcpy(&tmp, &vch[0], sizeof(tmp));

    addr  = CAddress(tmp.ip, tmp.port);
    addr = CAddress(tmp.ip, tmp.port, NODE_NETWORK);
    return true;
}

@@ -163,6 +163,7 @@ void ThreadIRCSeed(void* parg)
    int nErrorWait = 10;
    int nRetryWait = 10;

    // IRC server blocks TOR users
    if (fUseProxy && addrProxy.port == htons(9050))
        return;

@@ -237,14 +238,14 @@ void ThreadIRCSeed(void* parg)
            {
                // index 7 is limited to 16 characters
                // could get full length name at index 10, but would be different from join messages
                strcpy(pszName, vWords[7].c_str());
                strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));
                printf("IRC got who\n");
            }

            if (vWords[1] == "JOIN" && vWords[0].size() > 1)
            {
                // :username!username@50000007.F000000B.90000002.IP JOIN :#channelname
                strcpy(pszName, vWords[0].c_str() + 1);
                strlcpy(pszName, vWords[0].c_str() + 1, sizeof(pszName));
                if (strchr(pszName, '!'))
                    *strchr(pszName, '!') = '\0';
                printf("IRC got join\n");            
