@@ -10,7 +10,7 @@ cryptographic software written by Eric Young (eay@cryptsoft.com).

Compilers Supported
-------------------
MinGW GCC (currently v3.4.5)
MinGW GCC
Microsoft Visual C++ 6.0 SP6


@@ -20,6 +20,7 @@ Libraries you need to obtain separately to build:

              default path   download
wxWidgets      \wxwidgets     http://www.wxwidgets.org/downloads/
                                or prebuilt: http://wxpack.sourceforge.net
OpenSSL        \openssl       http://www.openssl.org/source/
Berkeley DB    \db            http://www.oracle.com/technology/software/products/berkeley-db/index.html
Boost          \boost         http://www.boost.org/users/download/

@@ -4,8 +4,11 @@

#include "headers.h"

void ThreadFlushWalletDB(void* parg);


unsigned int nWalletDBUpdated;




@@ -56,6 +59,8 @@ CDB::CDB(const char* pszFile, const char* pszMode, bool fTxn) : pdb(NULL)
    {
        if (!fDbEnvInit)
        {
            if (fShutdown)
                return;
            string strAppDir = GetAppDir();
            string strLogDir = strAppDir + "\\database";
            _mkdir(strLogDir.c_str());
@@ -121,12 +126,10 @@ void CDB::Close()
    pdb->close(0);
    delete pdb;
    pdb = NULL;
    dbenv.txn_checkpoint(0, 0, 0);

    CRITICAL_BLOCK(cs_db)
    {
        dbenv.txn_checkpoint(0, 0, 0);
        --mapFileUseCount[strFile];
    }

    RandAddSeed();
}
@@ -499,25 +502,6 @@ bool CReviewDB::WriteReviews(uint256 hash, const vector<CReview>& vReviews)
// CWalletDB
//

CWalletDB::~CWalletDB()
{
    // Flush whenever all handles to wallet.dat are closed
    CRITICAL_BLOCK(cs_db)
    {
        Close(); // close includes a txn_checkpoint
        map<string, int>::iterator mi = mapFileUseCount.find(strFile);
        if (mi != mapFileUseCount.end())
        {
            int nRefCount = (*mi).second;
            if (nRefCount == 0)
            {
                dbenv.lsn_reset(strFile.c_str(), 0);
                mapFileUseCount.erase(mi++);
            }
        }
    }
}

bool CWalletDB::LoadWallet(vector<unsigned char>& vchDefaultKeyRet)
{
    vchDefaultKeyRet.clear();
@@ -610,7 +594,7 @@ bool CWalletDB::LoadWallet(vector<unsigned char>& vchDefaultKeyRet)

    printf("fShowGenerated = %d\n", fShowGenerated);
    printf("fGenerateBitcoins = %d\n", fGenerateBitcoins);
    printf("nTransactionFee = %I64d\n", nTransactionFee);
    printf("nTransactionFee = %"PRI64d"\n", nTransactionFee);
    printf("addrIncoming = %s\n", addrIncoming.ToString().c_str());
    printf("fMinimizeToTray = %d\n", fMinimizeToTray);
    printf("fMinimizeOnClose = %d\n", fMinimizeOnClose);
@@ -655,5 +639,51 @@ bool LoadWallet(bool& fFirstRunRet)
        CWalletDB().WriteDefaultKey(keyUser.GetPubKey());
    }

    _beginthread(ThreadFlushWalletDB, 0, NULL);
    return true;
}

void ThreadFlushWalletDB(void* parg)
{
    static bool fOneThread;
    if (fOneThread)
        return;
    fOneThread = true;

    unsigned int nLastSeen = nWalletDBUpdated;
    unsigned int nLastFlushed = nWalletDBUpdated;
    int64 nLastWalletUpdate = GetTime();
    while (!fShutdown)
    {
        Sleep(500);

        if (nLastSeen != nWalletDBUpdated)
        {
            nLastSeen = nWalletDBUpdated;
            nLastWalletUpdate = GetTime();
        }

        if (nLastFlushed != nWalletDBUpdated && nLastWalletUpdate < GetTime() - 1)
        {
            TRY_CRITICAL_BLOCK(cs_db)
            {
                string strFile = "wallet.dat";
                map<string, int>::iterator mi = mapFileUseCount.find(strFile);
                if (mi != mapFileUseCount.end())
                {
                    int nRefCount = (*mi).second;
                    if (nRefCount == 0 && !fShutdown)
                    {
                        // Flush wallet.dat so it's self contained
                        nLastFlushed == nWalletDBUpdated;
                        int64 nStart = PerformanceCounter();
                        dbenv.txn_checkpoint(0, 0, 0);
                        dbenv.lsn_reset(strFile.c_str(), 0);
                        printf("Flushed wallet.dat %15"PRI64d"\n", PerformanceCounter() - nStart);
                        mapFileUseCount.erase(mi++);
                    }
                }
            }
        }
    }
}
@@ -17,7 +17,10 @@ extern map<string, string> mapAddressBook;
extern bool fClient;


extern unsigned int nWalletDBUpdated;
extern DbEnv dbenv;


extern void DBFlush(bool fShutdown);


@@ -334,11 +337,11 @@ bool LoadAddresses();




class CWalletDB : public CDB
{
public:
    CWalletDB(const char* pszMode="r+", bool fTxn=false) : CDB("wallet.dat", pszMode, fTxn) { }
    ~CWalletDB();
private:
    CWalletDB(const CWalletDB&);
    void operator=(const CWalletDB&);
@@ -351,12 +354,14 @@ public:

    bool WriteName(const string& strAddress, const string& strName)
    {
        nWalletDBUpdated++;
        mapAddressBook[strAddress] = strName;
        return Write(make_pair(string("name"), strAddress), strName);
    }

    bool EraseName(const string& strAddress)
    {
        nWalletDBUpdated++;
        mapAddressBook.erase(strAddress);
        return Erase(make_pair(string("name"), strAddress));
    }
@@ -368,11 +373,13 @@ public:

    bool WriteTx(uint256 hash, const CWalletTx& wtx)
    {
        nWalletDBUpdated++;
        return Write(make_pair(string("tx"), hash), wtx);
    }

    bool EraseTx(uint256 hash)
    {
        nWalletDBUpdated++;
        return Erase(make_pair(string("tx"), hash));
    }

@@ -384,6 +391,7 @@ public:

    bool WriteKey(const vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)
    {
        nWalletDBUpdated++;
        return Write(make_pair(string("key"), vchPubKey), vchPrivKey, false);
    }

@@ -395,6 +403,7 @@ public:

    bool WriteDefaultKey(const vector<unsigned char>& vchPubKey)
    {
        nWalletDBUpdated++;
        return Write(string("defaultkey"), vchPubKey);
    }

@@ -407,6 +416,7 @@ public:
    template<typename T>
    bool WriteSetting(const string& strKey, const T& value)
    {
        nWalletDBUpdated++;
        return Write(make_pair(string("setting"), strKey), value);
    }
