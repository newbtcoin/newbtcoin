@@ -100,13 +100,10 @@ bool AddToWallet(const CWalletTx& wtxIn)
        if (fInsertedNew)
            wtx.nTimeReceived = GetAdjustedTime();

        //// debug print
        printf("AddToWallet %s  %s\n", wtxIn.GetHash().ToString().substr(0,6).c_str(), fInsertedNew ? "new" : "update");

        bool fUpdated = false;
        if (!fInsertedNew)
        {
            // Merge
            bool fUpdated = false;
            if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != wtx.hashBlock)
            {
                wtx.hashBlock = wtxIn.hashBlock;
@@ -128,13 +125,15 @@ bool AddToWallet(const CWalletTx& wtxIn)
                wtx.fSpent = wtxIn.fSpent;
                fUpdated = true;
            }
            if (!fUpdated)
                return true;
        }

        //// debug print
        printf("AddToWallet %s  %s%s\n", wtxIn.GetHash().ToString().substr(0,6).c_str(), (fInsertedNew ? "new" : ""), (fUpdated ? "update" : ""));

        // Write to disk
        if (!wtx.WriteToDisk())
            return false;
        if (fInsertedNew || fUpdated)
            if (!wtx.WriteToDisk())
                return false;

        // Notify UI
        vWalletUpdated.push_back(hash);
@@ -820,7 +819,7 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo
            }

            if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())
                return error("ConnectInputs() : %s prevout.n out of range %d %d %d", GetHash().ToString().substr(0,6).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size());
                return error("ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\n%s", GetHash().ToString().substr(0,6).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,6).c_str(), txPrev.ToString().c_str());

            // If prev is coinbase, check that it's matured
            if (txPrev.IsCoinBase())
@@ -1217,7 +1216,7 @@ bool CBlock::AcceptBlock()
    if (nTime <= pindexPrev->GetMedianTimePast())
        return error("AcceptBlock() : block's timestamp is too early");

    // Check that all transactions are finalized (starting around 30 Nov 2009)
    // Check that all transactions are finalized (starting around Dec 2009)
    if (nBestHeight > 31000) // 25620 + 5320
        foreach(const CTransaction& tx, vtx)
            if (!tx.IsFinal(nTime))
@@ -1384,7 +1383,7 @@ FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszM
{
    if (nFile == -1)
        return NULL;
    FILE* file = fopen(strprintf("%s\\blk%04d.dat", GetDataDir().c_str(), nFile).c_str(), pszMode);
    FILE* file = fopen(strprintf("%s/blk%04d.dat", GetDataDir().c_str(), nFile).c_str(), pszMode);
    if (!file)
        return NULL;
    if (nBlockPos != 0 && !strchr(pszMode, 'a') && !strchr(pszMode, 'w'))
@@ -1718,6 +1717,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)




    if (strCommand == "version")
    {
        // Each connection can only send one version message
@@ -1765,6 +1765,10 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)

        pfrom->fSuccessfullyConnected = true;

        // Update the last seen time
        if (pfrom->fNetworkNode)
            AddressCurrentlyConnected(pfrom->addr);

        printf("version message: version %d\n", pfrom->nVersion);
    }

@@ -1781,23 +1785,16 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)
        vector<CAddress> vAddr;
        vRecv >> vAddr;

        // Clear addrknown lists periodically to allow refresh broadcasts
        static int64 nLastClearedAddrKnown;
        if (nLastClearedAddrKnown < GetAdjustedTime() - 24 * 60 * 60)
        {
            nLastClearedAddrKnown = GetAdjustedTime();
            CRITICAL_BLOCK(cs_vNodes)
                foreach(CNode* pnode, vNodes)
                    pnode->setAddrKnown.clear();
        }

        // Store the new addresses
        CAddrDB addrdb;
        foreach(const CAddress& addr, vAddr)
        foreach(CAddress& addr, vAddr)
        {
            if (fShutdown)
                return true;
            AddAddress(addrdb, addr);
            addr.nTime = GetAdjustedTime();
            if (pfrom->fGetAddr)
                addr.nTime -= 5 * 24 * 60 * 60;
            AddAddress(addrdb, addr, false);
            pfrom->AddAddressKnown(addr);
            if (!pfrom->fGetAddr && addr.IsRoutable())
            {
@@ -1816,6 +1813,10 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)
        vector<CInv> vInv;
        vRecv >> vInv;

        // Update the last seen time for this node's address
        if (pfrom->fNetworkNode)
            AddressCurrentlyConnected(pfrom->addr);

        CTxDB txdb("r");
        foreach(const CInv& inv, vInv)
        {
@@ -2099,6 +2100,25 @@ bool SendMessages(CNode* pto)
        if (pto->nVersion == 0)
            return true;

        // Address refresh broadcast
        static int64 nLastRebroadcast;
        if (nLastRebroadcast < GetTime() - 24 * 60 * 60) // every 24 hours
        {
            nLastRebroadcast = GetTime();
            CRITICAL_BLOCK(cs_vNodes)
            {
                foreach(CNode* pnode, vNodes)
                {
                    // Periodically clear setAddrKnown to allow refresh broadcasts
                    pnode->setAddrKnown.clear();

                    // Rebroadcast our address
                    if (addrLocalHost.IsRoutable() && !fUseProxy)
                        pnode->PushAddress(addrLocalHost);
                }
            }
        }


        //
        // Message: addr
@@ -2187,7 +2207,7 @@ void GenerateBitcoins(bool fGenerate)
    }
    if (fGenerateBitcoins)
    {
        int nProcessors = atoi(getenv("NUMBER_OF_PROCESSORS"));
        int nProcessors = wxThread::GetCPUCount();
        printf("%d processors\n", nProcessors);
        if (nProcessors < 1)
            nProcessors = 1;
            @@ -968,6 +968,14 @@ public:
            return error("CBlock::WriteToDisk() : ftell failed");
        fileout << *this;

        // Flush stdio buffers and commit to disk before returning
        fflush(fileout);
#ifdef __WXMSW__
        _commit(_fileno(fileout));
#else
        fsync(fileno(fileout));
#endif

        return true;
    }
@@ -0,0 +1,86 @@
# Copyright (c) 2009 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file license.txt or http://www.opensource.org/licenses/mit-license.php.


ifneq "$(BUILD)" "debug"
ifneq "$(BUILD)" "release"
BUILD=debug
endif
endif
ifeq "$(BUILD)" "debug"
D=d
DEBUGFLAGS=-g -D__WXDEBUG__
endif



INCLUDEPATHS=-I"/usr/include" \
             -I"/usr/local/boost_1_40_0" \
             -I"/usr/local/db-4.7.25.NC/build_unix" \
             -I"/usr/local/include/wx-2.8" \
             -I"/usr/local/lib/wx/include/gtk2-ansi-debug-static-2.8"

LIBPATHS=-L"/usr/lib" \
         -L"/usr/local/lib" \
         -L"/usr/local/db-4.7.25.NC/build_unix"

LIBS= \
 -Wl,-Bstatic -l boost_thread -l boost_system -l boost_filesystem -Wl,-Bdynamic \
 -Wl,-Bstatic -l db_cxx -l wx_gtk2$(D)-2.8 -Wl,-Bdynamic \
 -l crypto \
 -l gtk-x11-2.0 -l gthread-2.0 -l SM
WXDEFS=-D__WXGTK__ -DNOPCH
CFLAGS=-O0 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(WXDEFS) $(INCLUDEPATHS)
HEADERS=headers.h util.h main.h serialize.h uint256.h key.h bignum.h script.h db.h base58.h



all: bitcoin


headers.h.gch: headers.h $(HEADERS) net.h irc.h market.h uibase.h ui.h
	g++ -c $(CFLAGS) -o $@ $<

obj/util.o: util.cpp		    $(HEADERS)
	g++ -c $(CFLAGS) -o $@ $<

obj/script.o: script.cpp	    $(HEADERS)
	g++ -c $(CFLAGS) -o $@ $<

obj/db.o: db.cpp		    $(HEADERS) market.h
	g++ -c $(CFLAGS) -o $@ $<

obj/net.o: net.cpp		    $(HEADERS) net.h
	g++ -c $(CFLAGS) -o $@ $<

obj/main.o: main.cpp		    $(HEADERS) net.h market.h sha.h
	g++ -c $(CFLAGS) -o $@ $<

obj/market.o: market.cpp	    $(HEADERS) market.h
	g++ -c $(CFLAGS) -o $@ $<

obj/ui.o: ui.cpp		    $(HEADERS) net.h uibase.h ui.h market.h
	g++ -c $(CFLAGS) -o $@ $<

obj/uibase.o: uibase.cpp	    uibase.h
	g++ -c $(CFLAGS) -o $@ $<

obj/sha.o: sha.cpp		    sha.h
	g++ -c $(CFLAGS) -O3 -o $@ $<

obj/irc.o:  irc.cpp		    $(HEADERS)
	g++ -c $(CFLAGS) -o $@ $<




OBJS=obj/util.o obj/script.o obj/db.o obj/net.o obj/main.o obj/market.o \
	obj/ui.o obj/uibase.o obj/sha.o obj/irc.o 

bitcoin: headers.h.gch $(OBJS)
	g++ $(CFLAGS) -o $@ $(LIBPATHS) $(OBJS) $(LIBS)

clean:
	-rm obj/*
	-rm headers.h.gch
